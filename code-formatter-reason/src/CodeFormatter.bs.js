// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");

var defaultOptions = {
  indentSize: 2,
  useTabs: false,
  maxLineLength: 80,
  insertSpaces: true,
  trimTrailingWhitespace: true
};

function createIndent(level, options) {
  var level$1 = 0 > level ? 0 : level;
  var indentStr = $$String.make(Caml_int32.imul(level$1, options.indentSize), /* " " */32);
  if (options.useTabs) {
    return $$String.make(level$1, /* "\t" */9);
  } else {
    return indentStr;
  }
}

function trimTrailingWhitespace(line) {
  var _str = line;
  while(true) {
    var str = _str;
    var len = str.length;
    if (len === 0) {
      return str;
    }
    var lastChar = Caml_string.get(str, len - 1 | 0);
    var switcher = lastChar - 9 | 0;
    if (switcher > 4 || switcher < 0) {
      if (switcher !== 23) {
        return str;
      }
      
    } else if (switcher === 3 || switcher === 2) {
      return str;
    }
    _str = $$String.sub(str, 0, len - 1 | 0);
    continue ;
  };
}

function formatJavaScript(code, options) {
  var lines = code.split("\n");
  var currentIndent = {
    contents: 0
  };
  var result = {
    contents: ""
  };
  var splitByBraces = function (line) {
    var parts = /* [] */0;
    var current = "";
    for(var i = 0 ,i_finish = line.length; i < i_finish; ++i){
      var c = Caml_string.get(line, i);
      var exit = 0;
      if (c !== 123 && c !== 125) {
        current = current + $$String.make(1, c);
      } else {
        exit = 1;
      }
      if (exit === 1) {
        if (current.length !== 0) {
          parts = /* :: */[
            current,
            parts
          ];
        }
        parts = /* :: */[
          $$String.make(1, c),
          parts
        ];
        current = "";
      }
      
    }
    if (current.length !== 0) {
      parts = /* :: */[
        current,
        parts
      ];
    }
    return List.rev(parts);
  };
  $$Array.iter((function (line) {
          var trimmed = line.trim();
          if (trimmed.length === 0) {
            return ;
          }
          var parts = splitByBraces(trimmed);
          return List.iter((function (part) {
                        var trimmedPart = part.trim();
                        switch (trimmedPart) {
                          case "" :
                              return ;
                          case "{" :
                              result.contents = result.contents + " {\n";
                              currentIndent.contents = currentIndent.contents + 1 | 0;
                              return ;
                          case "}" :
                              currentIndent.contents = Caml_primitive.caml_int_max(0, currentIndent.contents - 1 | 0);
                              result.contents = result.contents + ("\n" + (createIndent(currentIndent.contents, options) + "}"));
                              return ;
                          default:
                            if (!trimmedPart.includes("}") && !trimmedPart.includes("{")) {
                              result.contents = result.contents + ("\n" + (createIndent(currentIndent.contents, options) + trimmedPart));
                              return ;
                            } else {
                              return ;
                            }
                        }
                      }), parts);
        }), lines);
  return result.contents.replace(/\n\s*\n/g, "\n").replace(/^\s*\n/, "").trim();
}

function formatPython(code, options) {
  var lines = code.split("\n");
  var currentIndent = {
    contents: 0
  };
  var processLine = function (line) {
    var trimmed = line.trim();
    var indent = createIndent(currentIndent.contents, options);
    var formatted = indent + trimmed;
    if (trimmed.includes(":")) {
      currentIndent.contents = currentIndent.contents + 1 | 0;
    } else if (trimmed === "") {
      currentIndent.contents = Caml_primitive.caml_int_max(0, currentIndent.contents - 1 | 0);
    }
    return formatted;
  };
  var formattedLines = $$Array.map((function (line) {
          if (options.trimTrailingWhitespace) {
            return trimTrailingWhitespace(processLine(line));
          } else {
            return processLine(line);
          }
        }), lines);
  return formattedLines.join("\n");
}

function formatJSON(code, options) {
  var level = 0;
  var chars = code.split("");
  var output = "";
  var i = 0;
  var len = chars.length;
  var currentIndent = level;
  while(i < len) {
    var c = Caml_array.caml_array_get(chars, i);
    var exit = 0;
    switch (c) {
      case "\t" :
      case "\n" :
      case "\r" :
      case " " :
          i = i + 1 | 0;
          break;
      case "," :
          output = output + (c + ("\n" + createIndent(currentIndent, options)));
          i = i + 1 | 0;
          break;
      case "[" :
      case "{" :
          exit = 1;
          break;
      case "]" :
      case "}" :
          exit = 2;
          break;
      default:
        output = output + c;
        i = i + 1 | 0;
    }
    switch (exit) {
      case 1 :
          output = output + ((
              i === 0 ? "" : "\n" + createIndent(currentIndent, options)
            ) + c);
          currentIndent = currentIndent + 1 | 0;
          output = output + ("\n" + createIndent(currentIndent, options));
          i = i + 1 | 0;
          break;
      case 2 :
          currentIndent = Caml_primitive.caml_int_max(0, currentIndent - 1 | 0);
          output = output + ("\n" + (createIndent(currentIndent, options) + c));
          i = i + 1 | 0;
          break;
      
    }
  };
  return output;
}

function formatCode(code, language, optionsOpt, param) {
  var options = optionsOpt !== undefined ? optionsOpt : defaultOptions;
  switch (language) {
    case /* JavaScript */0 :
        return formatJavaScript(code, options);
    case /* Python */1 :
        return formatPython(code, options);
    case /* JSON */2 :
        return formatJSON(code, options);
    case /* HTML */3 :
        return "HTML formatting not implemented yet";
    case /* CSS */4 :
        return "CSS formatting not implemented yet";
    case /* SQL */5 :
        return "SQL formatting not implemented yet";
    
  }
}

var testJs = "function example() {if(true){console.log(\"Hello\");}}";

var testPy = "def example():\nif True:\nprint(\"Hello\")\nreturn None";

var testJson = "{\"name\":\"John\",\"age\":30,\"city\":\"New York\"}";

console.log("JavaScript Example:");

console.log(formatCode(testJs, /* JavaScript */0, undefined, undefined));

console.log("\nPython Example:");

console.log(formatCode(testPy, /* Python */1, undefined, undefined));

console.log("\nJSON Example:");

console.log(formatCode(testJson, /* JSON */2, undefined, undefined));

exports.defaultOptions = defaultOptions;
exports.createIndent = createIndent;
exports.trimTrailingWhitespace = trimTrailingWhitespace;
exports.formatJavaScript = formatJavaScript;
exports.formatPython = formatPython;
exports.formatJSON = formatJSON;
exports.formatCode = formatCode;
exports.testJs = testJs;
exports.testPy = testPy;
exports.testJson = testJson;
/*  Not a pure module */
